package pl.put.poznan.transformer.app;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import pl.put.poznan.transformer.logic.Input;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.ComboBoxUI;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileFilter;
import java.util.stream.IntStream;

/**
 * Created by Kuba on 28.12.2017.
 */
public class MainWindow {
    private JFileChooser fc;
    private JPanel mainPanel;
    private Input input;
    private JButton wczytajButton;
    private JButton podglądScenariuszaButton;
    private JPanel bottomPanel;
    private JPanel topPanel;
    private JList<String> list1;
    private JLabel scenarioTitle;
    private JScrollPane scrollPane;
    private JLabel scenarioLevelsLabel;
    private JLabel scenarioSteps;
    private JLabel levelSelectionLabel;
    private JComboBox levelSelectionBox;
    private JPanel rightPanel;
    private JButton pobierzKrokiNieZaczynająceButton;
    private JButton pobierzZNumeracjąKrokówButton;
    private JLabel scenarioCond;
    private JLabel scenarioStepsLabel;
    private JTextArea textArea1;
    private JButton ograniczButton;
    private JTextPane textPane1;
    private File file;

    public MainWindow() {
        $$$setupUI$$$();
        wczytajButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                fc = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter("Plik tekstowy (*.txt)", "txt");
                fc.setAcceptAllFileFilterUsed(false);
                fc.setFileFilter(filter);
                int returnVal = fc.showDialog(mainPanel, "Wybierz plik");
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    file = fc.getSelectedFile();
                    System.out.println("Otwieranie pliku " + file);
                    MainWindow.this.loadFile(file);
                } else {
                    System.out.println("Anulowano otwieranie pliku");
                }
            }
        });

        podglądScenariuszaButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textArea1.setText(input.getSteps());
            }
        });

        pobierzZNumeracjąKrokówButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                textArea1.setText(input.getNumberedSteps());
            }
        });

        pobierzKrokiNieZaczynająceButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                for (String s : input.getBuggableLines())
                    textArea1.append(s);
            }
        });
        ograniczButton.addActionListener(e -> {
            if ((int) levelSelectionBox.getSelectedItem() != 0)
                textArea1.setText(input.getSubScenarios(textArea1.getText().split("\n"), (int) levelSelectionBox.getSelectedItem()));
        });
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("Analizator Scenariuszy");
        frame.setContentPane(new MainWindow().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    private void loadFile(File file) {
        input = new Input(file.toString());
        scenarioTitle.setText(input.getTitle());
        textArea1.setText(input.getSteps());
        scenarioSteps.setText(Integer.toString(input.getStepsCount()));
        scenarioCond.setText(Integer.toString(input.getConditionalDecisionCount()));
        levelSelectionBox.removeAllItems();
        System.out.println(input.getMaxDepth());
        for (int i = 0; i <= input.getMaxDepth() + 1; i++)
            levelSelectionBox.addItem(i);
    }

    private void createUIComponents() {
        Integer[] numbers = IntStream.range(0, 10).boxed().toArray(Integer[]::new);
        levelSelectionBox = new JComboBox<>(numbers);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 5, 0), -1, -1));
        mainPanel.add(bottomPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        wczytajButton = new JButton();
        wczytajButton.setText("Wczytaj");
        bottomPanel.add(wczytajButton, new GridConstraints(0, 0, 4, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        podglądScenariuszaButton = new JButton();
        podglądScenariuszaButton.setText("Podgląd scenariusza");
        bottomPanel.add(podglądScenariuszaButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pobierzKrokiNieZaczynająceButton = new JButton();
        pobierzKrokiNieZaczynająceButton.setText("Pobierz kroki nie zaczynające się od aktora");
        bottomPanel.add(pobierzKrokiNieZaczynająceButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        pobierzZNumeracjąKrokówButton = new JButton();
        pobierzZNumeracjąKrokówButton.setText("Pobierz z numeracją kroków");
        bottomPanel.add(pobierzZNumeracjąKrokówButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        topPanel = new JPanel();
        topPanel.setLayout(new GridLayoutManager(2, 1, new Insets(5, 5, 0, 0), -1, -1));
        mainPanel.add(topPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scenarioTitle = new JLabel();
        scenarioTitle.setText("Scenariusz");
        topPanel.add(scenarioTitle, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollPane = new JScrollPane();
        topPanel.add(scrollPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(300, 200), null, null, 0, false));
        textArea1 = new JTextArea();
        textArea1.setEditable(false);
        textArea1.setEnabled(true);
        textArea1.setLineWrap(false);
        scrollPane.setViewportView(textArea1);
        rightPanel = new JPanel();
        rightPanel.setLayout(new GridLayoutManager(4, 4, new Insets(0, 0, 0, 5), -1, -1));
        mainPanel.add(rightPanel, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scenarioLevelsLabel = new JLabel();
        scenarioLevelsLabel.setText("Liczba instrukcji warunkowych:");
        rightPanel.add(scenarioLevelsLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        levelSelectionLabel = new JLabel();
        levelSelectionLabel.setText("Ogranicz do poziomu:");
        rightPanel.add(levelSelectionLabel, new GridConstraints(2, 0, 2, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        rightPanel.add(levelSelectionBox, new GridConstraints(2, 1, 2, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(50, -1), null, null, 0, false));
        scenarioStepsLabel = new JLabel();
        scenarioStepsLabel.setText("Liczba kroków:");
        rightPanel.add(scenarioStepsLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scenarioCond = new JLabel();
        scenarioCond.setText("0");
        rightPanel.add(scenarioCond, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scenarioSteps = new JLabel();
        scenarioSteps.setText("0");
        rightPanel.add(scenarioSteps, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ograniczButton = new JButton();
        ograniczButton.setText("Ogranicz");
        rightPanel.add(ograniczButton, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scenarioTitle.setLabelFor(scrollPane);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
